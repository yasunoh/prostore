// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  slug String @unique(map: "product_slug_idx")
  category String
  images String[]
  brand String
  description String
  stock Int
  price Decimal @default(0) @db.Decimal(12,2)
  rating Decimal @default(0) @db.Decimal(3,2)
  numReviews Int @default(0)
  isFeatured Boolean @default(false)
  banner String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  
  orderitems     OrderItem[]
  review      Review[]
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String?   @unique(map: "user_email_idx")
  emailVerified DateTime? @map("email_verified") @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?      @db.Json
  paymentMethod String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt()
  account   Account[]
  session   Session[]
  cart      Cart[]
  order      Order[]
  review      Review[]
 
  @@map("users")
}

model Account {
  id                 String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String  @map("user_id")  @db.Uuid
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt()
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt()

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @map("user_id") @db.Uuid
  sessionCartId String
  items         Json[]  @default([])  @db.Json
  itemsPrice    Decimal @db.Decimal(12, 2)
  totalPrice    Decimal @db.Decimal(12, 2)
  shippingPrice Decimal @db.Decimal(12, 2)
  taxPrice      Decimal @db.Decimal(12, 2)

  createdAt     DateTime @default(now()) @db.Timestamp(6)

  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String  @map("user_id") @db.Uuid
  shippingAddress Json @db.Json
  paymentMethod   String
  paymentResult   Json? @db.Json
  itemsPrice      Decimal @db.Decimal(12, 2)
  shippingPrice      Decimal @db.Decimal(12, 2)
  taxPrice      Decimal @db.Decimal(12, 2)
  totalPrice      Decimal @db.Decimal(12, 2)
  isPaid          Boolean @default(false)
  paidAt          DateTime? @db.Timestamp(6)
  isDelivered          Boolean @default(false)
  deliveredAt          DateTime? @db.Timestamp(6)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  orderitems     OrderItem[]

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  orderId          String  @db.Uuid
  productId        String  @db.Uuid
  qty              Int
  price            Decimal @db.Decimal(12, 2)
  name             String
  slug             String
  image            String
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product    @relation(fields: [productId], references: [id], onDelete: Cascade)


  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model Review {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String  @map("user_id") @db.Uuid
  productId        String  @map("product_id") @db.Uuid
  rating        Int
  title         String
  description   String
  isVerifiedPurchase  Boolean @default(true)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  product          Product    @relation(fields: [productId], references: [id], onDelete: Cascade)  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)  
}